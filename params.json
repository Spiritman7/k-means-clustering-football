{"note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"","name":"k-means-clustering of Premier League footballers in the 2011/12 Season","body":"# K-means-clustering of Premier League footballers in the 2011/12 Season\r\n\r\n## Introduction\r\nI recently saw an application of the [k-means clustering](http://en.wikipedia.org/wiki/K-means_clustering) algorithm by Charles Leifer. He [tried to find](http://charlesleifer.com/blog/using-python-and-k-means-to-find-the-dominant-colors-in-images/) the dominant colours of an image. I had heard of the algorithm before and this inspired me find my own application of the  technique. After a bit of pondering, I remembered the  [Manchester City Analytics Dataset](http://www.mcfc.co.uk/the-club/mcfc-analytics) released a couple of months ago. This data was perfect to analyse. \r\n\r\nMy idea was less to do with the means of the clusters, but rather the clusters themselves. I would use the algorithm to divide the players up into different groups in the most even way.\r\n\r\n## Methodology\r\nThe dataset is a csv file which contains a list of player performances - one row per performance for each player. The first task was to parse the data. So I created a Player class which holds all the stats for that player. I made sure I didn't capture the meta stats (\"Team Id\", \"Venue\", etc) - only the numerical stats of performance in the game. Then, I summed these stats up and divided by the number of games played to produce an 'average number of x per game' style stat.\r\n\r\nThe next step was to normalise this data so certain stats which were high (passes per game for example) weren't overweighted against stats which were low (tackles per game for example). I did this by letting each stat be equal to the linear position of that stat between the lowest and highest stat of that type amongst players. This meant each stat was now a value between 0 and 1.\r\n\r\nFrom here, we can use the k-means algorithm to divide the players into k groups, each with a centre, minimising the distance between each player and its closest centre. As the algorithm depends on random starting conditions, I ran the algorithm 5 times and chose the best clustering. Typically, the clusterings ended up almost identically.\r\n\r\nI then looked to find out what the 'key' features of each cluster were. This was calculated by seeing how different each stat of the centre of a cluster was to the same stat of the centre of all the other clusters. The more different the stat was, the more 'salient' to the cluster I declared the stat. \r\n\r\nInitially upon doing this, I found that certain clusters were being arranged due to certain players propensity to taking free-kicks or corners. I decided that these stats weren't relevant to what the player was like during open play, so made an option to discard them.\r\n\r\nI also made an option to filter the players by the meta stats. This allowed me to discard goalkeepers, players that came on as a substitute, limit to only midfielders etc.\r\n\r\n##Results","google":""}